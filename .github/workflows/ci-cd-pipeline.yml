name: Python CI/CD Pipeline

# Trigger the workflow on push to the main branch
on:
  push:
    branches:
      - main  # Change this to any branch you want the CI/CD to run on

jobs:
  build:
    runs-on: ubuntu-latest  # Specify the runner to use (Ubuntu for Python-based projects)
    
    steps:
      # Step 1: Checkout the repository code
      - name: Checkout code
        uses: actions/checkout@v3  # GitHub Action to checkout the repo
        
      # Step 2: Set up Python 3.12.7
      - name: Set up Python 3.12.7
        uses: actions/setup-python@v4
        with:
          python-version: 3.12.7  # Use the specified Python version

      # Step 3: Install dependencies from requirements.txt
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip  # Upgrade pip to avoid any issues
          pip install -r requirements.txt  # Install dependencies from requirements.txt

      # Step 4: Run tests with pytest (or your preferred testing tool)
      - name: Run tests
        run: |
          pytest  # or use any other test command like `python -m unittest discover`
      
      # Step 5: Build Docker image (optional if you are using Docker)
      - name: Build Docker image
        run: |
          docker build -t your-dockerhub-username/your-app-name .  # Build Docker image

      # Step 6: Push Docker image to Docker Hub (optional)
      - name: Push Docker image to Docker Hub
        uses: docker/login-action@v2  # Log in to Docker Hub
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
        
      - run: |
          docker push your-dockerhub-username/your-app-name  # Push the image

      # Step 7: Deploy to AWS (or another hosting platform like Heroku, DigitalOcean, etc.)
      - name: Deploy to AWS (or any other platform)
        run: |
          aws ecs update-service --cluster your-cluster-name --service your-service-name --force-new-deployment  # AWS ECS deployment
